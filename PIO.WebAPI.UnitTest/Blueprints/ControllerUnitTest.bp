{{- dtoAttribute = class.attributes | find "DTOAttribute"  }}
{{- if !dtoAttribute}}
#warning no DTO attribute was set on class {{class.name}}
{{-ret}}
{{-end}}
{{- tableName=(dtoAttribute.parameters | find "Name").value }}

{{-primaryKey=class.properties | with_attribute "PrimaryKey" | array.first}}
{{- if !primaryKey}}
#warning no PrimaryKey attribute was set on class {{class.name}}
{{-ret}}
{{-end}}

{{- -}}

// <auto-generated/>
using PIO.Models;
using BlueprintLib.Attributes;
using LogLib;
using PIO.WebAPI.Controllers;
using Moq;
using PIO.DataProvider;
using Microsoft.AspNetCore.Mvc;

namespace PIO.WebAPI.UnitTest
{
    [TestClass]
	public partial class {{class.name}}
    {
        [TestMethod]
		public void ShouldGet{{tableName}}()
		{
			DebugLogger logger;
			IDataProvider dataProvider;
			{{tableName}}Controller controller;
			#nullable enable
			OkObjectResult? result;
			{{tableName}}[]? content;
			#nullable disable

			// Arrange
			logger = new DebugLogger();
			
			dataProvider = Mock.Of<IDataProvider>();
			Mock.Get(dataProvider).Setup(mock => mock.Get{{tableName}}()).Returns(
				new {{tableName}}[] {
					new {{tableName}} { {{primaryKey.name}} = 1 },
					new {{tableName}} { {{primaryKey.name}} = 2 }
				}
			);		
			
			controller = new {{tableName}}Controller(logger,dataProvider);
			
			// Act
			result = controller.Get() as OkObjectResult;
			content=result?.Value as {{tableName}}[];

			// Assert
			Assert.IsNotNull(result);
			Assert.IsNotNull(content);
			Assert.AreEqual(2, content.Length);
			Assert.AreEqual(1, content[0].{{primaryKey.name}});
			Assert.AreEqual(2, content[1].{{primaryKey.name}});

			Assert.AreEqual(0, logger.WarningCount);
			Assert.AreEqual(0, logger.ErrorCount);
			Assert.AreEqual(0, logger.FatalCount);
		}

    }
}