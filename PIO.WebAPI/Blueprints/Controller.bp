{{- dtoAttribute = class.attributes | find "DTOAttribute"  }}
{{- if !dtoAttribute}}
#warning no DTO attribute was set on class {{class.name}}
{{-ret}}
{{-end}}
{{- tableName=(dtoAttribute.parameters | find "Name").value }}

{{-primaryKey=class.properties | with_attribute "PrimaryKey" | array.first}}
{{- if !primaryKey}}
#warning no PrimaryKey attribute was set on class {{class.name}}
{{-ret}}
{{-end}}

{{- -}}

// <auto-generated/>
using Microsoft.AspNetCore.Mvc;
using PIO.Models;
using BlueprintLib.Attributes;

namespace PIO.WebAPI.Controllers
{
    
    [ApiController, Route("[controller]")]
    public partial class {{class.name}} : PIOController
    {

        public {{class.name}}(LogLib.ILogger Logger, PIODatabase Database) : base(Logger,Database) 
        {
        }

        [HttpGet()]
        public IResult Get()
        {
            LogEnter();

            Log(LogLib.Message.Information($"Get {{tableName}} table from database"));
            try
            {
                {{tableName}}[] items = Database.{{tableName}}Table.ToArray();
				Log(LogLib.Message.Information($"Query returned {items.Length} result(s)"));
				return Results.Ok(items);
            }
            catch (Exception ex)
            {
                Log(ex);
                return Results.StatusCode(StatusCodes.Status500InternalServerError);
			}
        }

        [HttpGet("{{primaryKey.name}}")]
        public IResult Get(byte {{primaryKey.name}})
        {
            LogEnter();

            Log(LogLib.Message.Information($"Get {{tableName}} with {{primaryKey.name}}={%{{}%}{{primaryKey.name}}{%{}}%} table from database"));
            try
            {
                {{tableName}}? item = Database.{{tableName}}Table.FirstOrDefault(item => item.PersonnID == {{primaryKey.name}});
				if (item == null)
                {
                    Log(LogLib.Message.Warning($"Item was not found"));
                    return Results.NotFound();
                }
                Log(LogLib.Message.Information($"Query returned 1 result"));
				return Results.Ok(item);
            }
            catch (Exception ex)
            {
                Log(ex);
                return Results.StatusCode(StatusCodes.Status500InternalServerError);
			}
        }

    }
}