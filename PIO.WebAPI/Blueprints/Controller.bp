{{- dtoAttribute = class.attributes | find "DTOAttribute"  }}
{{- if !dtoAttribute}}
#warning no DTO attribute was set on class {{class.name}}
{{-ret}}
{{-end}}
{{- tableName=(dtoAttribute.parameters | find "Name").value }}

{{-primaryKey=class.properties | with_attribute "PrimaryKey" | array.first}}
{{- if !primaryKey}}
#warning no PrimaryKey attribute was set on class {{class.name}}
{{-ret}}
{{-end}}

{{- -}}

// <auto-generated/>
using Microsoft.AspNetCore.Mvc;
using PIO.Models;
using BlueprintLib.Attributes;
using PIO.DataProvider;

namespace PIO.WebAPI.Controllers
{
    
    [ApiController, Route("[controller]")]
    public partial class {{class.name}} : PIOController
    {

        public {{class.name}}(LogLib.ILogger Logger, IDataProvider DataProvider) : base(Logger, DataProvider) 
        {
        }

        [ProducesResponseType(StatusCodes.Status200OK)]
        [HttpGet()]
        public IActionResult Get()
        {
            LogEnter();

            Log(LogLib.Message.Information($"Get {{tableName}} table from data provider"));
            try
            {
                {{tableName}}[] items = DataProvider.Get{{tableName}}().ToArray();
				Log(LogLib.Message.Information($"Query returned {items.Length} result(s)"));
				return Ok(items);
            }
            catch (Exception ex)
            {
                Log(ex);
                return StatusCode(StatusCodes.Status500InternalServerError);
			}
        }

        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]       
        [HttpGet("{{primaryKey.name}}")]
        public IActionResult Get(byte {{primaryKey.name}})
        {
            LogEnter();

            Log(LogLib.Message.Information($"Get {{tableName}} with {{primaryKey.name}}={%{{}%}{{primaryKey.name}}{%{}}%} from data provider"));
            try
            {
                #nullable enable
                {{tableName}}? item = DataProvider.Get{{tableName}}({{primaryKey.name}});
                #nullable disable
				if (item == null)
                {
                    Log(LogLib.Message.Warning($"Item was not found"));
                    return NotFound();
                }
                Log(LogLib.Message.Information($"Query returned 1 result"));
				return Ok(item);
            }
            catch (Exception ex)
            {
                Log(ex);
                return StatusCode(StatusCodes.Status500InternalServerError);
			}
        }

        [ProducesResponseType(StatusCodes.Status200OK)]
        [HttpPost()]
        public IActionResult Post({{tableName}} {{tableName}})
        {
            LogEnter();

            Log(LogLib.Message.Information($"Post {{tableName}} to data provider"));
            try
            {
                {{tableName}} item = DataProvider.Post{{tableName}}({{tableName}});
                Log(LogLib.Message.Information($"Query returned 1 result"));
				return Ok(item);
            }
            catch (Exception ex)
            {
                Log(ex);
                return StatusCode(StatusCodes.Status500InternalServerError);
			}
        }


    }
}